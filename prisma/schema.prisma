generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./json"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model audit {
  auditID     Int       @id @default(autoincrement())
  auditIP     String?   @db.VarChar(255)
  auditURL    String?   @db.VarChar(255)
  method      String?   @db.VarChar(255)
  payload     String?   @db.VarChar(255)
  createdDate DateTime? @db.DateTime(0)
}

model user {
  userID             Int                  @id @default(autoincrement())
  userUsername       String?              @db.VarChar(255)
  userFullName       String?              @db.VarChar(255)
  userEmail          String?              @db.VarChar(255)
  userPassword       String?              @db.VarChar(255)
  userStatus         String?              @db.VarChar(255)
  userPhone          String?              @db.VarChar(255)
  userIC             String               @db.VarChar(50)
  userCreatedDate    DateTime?            @db.DateTime(0)
  userModifiedDate   DateTime?            @db.DateTime(0)
  appointments       appointments[]
  user_parents       user_parents[]
  user_patients      user_patients[]
  user_practitioners user_practitioners[]
  userrole           userrole[]
}

model role {
  roleID           Int        @id @default(autoincrement())
  roleName         String?    @db.VarChar(255)
  roleDescription  String?    @db.VarChar(255)
  roleStatus       String?    @db.VarChar(255)
  roleCreatedDate  DateTime?  @db.DateTime(0)
  roleModifiedDate DateTime?  @db.DateTime(0)
  userrole         userrole[]
}

model lookup {
  lookupID                                              Int              @id @default(autoincrement())
  refCode                                               String?          @db.VarChar(255)
  type                                                  String?          @db.VarChar(255)
  title                                                 String?          @db.VarChar(255)
  value                                                 String?          @db.VarChar(255)
  status                                                String?          @db.VarChar(255)
  lookupOrder                                           Int?
  lookupCreatedDate                                     DateTime?        @db.DateTime(0)
  lookupModifiedDate                                    DateTime?        @db.DateTime(0)
  appointments                                          appointments[]
  faq                                                   faq[]
  progress_track                                        progress_track[]
  user_parents_user_parents_parent_relationshipTolookup user_parents[]   @relation("user_parents_parent_relationshipTolookup")
  user_parents_user_parents_parent_nationalityTolookup  user_parents[]   @relation("user_parents_parent_nationalityTolookup")
  user_parents_user_parents_parent_stateTolookup        user_parents[]   @relation("user_parents_parent_stateTolookup")
}

model userrole {
  userRoleID          Int       @id @default(autoincrement())
  userRoleUserID      Int?
  userRoleRoleID      Int?
  userRoleCreatedDate DateTime? @db.DateTime(0)
  user                user?     @relation(fields: [userRoleUserID], references: [userID], onDelete: NoAction, onUpdate: NoAction, map: "FK_userrole_user")
  role                role?     @relation(fields: [userRoleRoleID], references: [roleID], onDelete: NoAction, onUpdate: NoAction, map: "FK_userrole_role")

  @@index([userRoleRoleID], map: "userRoleRoleID")
  @@index([userRoleUserID], map: "userRoleUserID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model appointments {
  appointment_id           Int                 @id @default(autoincrement())
  patient_id               Int?
  practitioner_id          Int?
  book_by                  Int?
  service_id               Int?
  date                     DateTime            @db.Date
  slot_ID                  Int?
  status                   Int
  parent_rate              Decimal?            @db.Decimal(10, 2)
  parent_comment           String?             @db.VarChar(255)
  therapist_doctor_comment String?             @db.VarChar(255)
  created_at               DateTime            @db.Timestamp(0)
  updated_at               DateTime            @default(now()) @db.Timestamp(0)
  deleted_at               DateTime?           @db.Timestamp(0)
  user                     user?               @relation(fields: [book_by], references: [userID], onUpdate: NoAction, map: "fk_book_by")
  user_patients            user_patients?      @relation(fields: [patient_id], references: [patient_id], onUpdate: NoAction, map: "fk_patient_id")
  user_practitioners       user_practitioners? @relation(fields: [practitioner_id], references: [practitioner_id], onUpdate: NoAction, map: "fk_practitioner")
  service                  service?            @relation(fields: [service_id], references: [service_id], onUpdate: NoAction, map: "fk_service_id")
  lookup                   lookup?             @relation(fields: [slot_ID], references: [lookupID], onUpdate: NoAction, map: "fk_slotId")

  @@index([book_by], map: "fk_book_by")
  @@index([patient_id], map: "fk_patient_id")
  @@index([practitioner_id], map: "fk_practitioner")
  @@index([service_id], map: "fk_service_id")
  @@index([slot_ID], map: "fk_slotId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model progress_track {
  progress_id        Int                 @id @default(autoincrement())
  patient_id         Int?
  practitioner_id    Int?
  progress_category  Int?
  progress_details   String              @db.Text
  created_at         DateTime            @db.Timestamp(0)
  updated_at         DateTime            @default(now()) @db.Timestamp(0)
  deleted_at         DateTime?           @db.Timestamp(0)
  user_patients      user_patients?      @relation(fields: [patient_id], references: [patient_id], onUpdate: NoAction, map: "fk_patient")
  user_practitioners user_practitioners? @relation(fields: [practitioner_id], references: [practitioner_id], onUpdate: NoAction, map: "fk_practitioner_id")
  lookup             lookup?             @relation(fields: [progress_category], references: [lookupID], onUpdate: NoAction, map: "fk_progress_category")

  @@index([patient_id], map: "fk_patient")
  @@index([practitioner_id], map: "fk_practitioner_id")
  @@index([progress_category], map: "fk_progress_category")
}

model questionnaires {
  questionnaire_id         Int                        @id @default(autoincrement())
  title                    String?                    @db.VarChar(255)
  description              String?                    @db.Text
  header                   String?                    @db.Text
  status                   String?                    @db.VarChar(50)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @default(now()) @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  questionnaire_scoring    questionnaire_scoring[]
  questionnaires_questions questionnaires_questions[]
  questionnaires_responds  questionnaires_responds[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model questionnaires_questions {
  question_id                      Int                                @id @default(autoincrement())
  questionnaire_id                 Int?
  parentID                         Int?
  question_text_bm                 String?                            @db.VarChar(255)
  question_text_bi                 String?                            @db.VarChar(255)
  is_required                      Boolean?
  answer_type                      Int?
  status                           String?                            @db.VarChar(50)
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @default(now()) @db.Timestamp(0)
  deleted_at                       DateTime?                          @db.Timestamp(0)
  questionnaires                   questionnaires?                    @relation(fields: [questionnaire_id], references: [questionnaire_id], onDelete: NoAction, onUpdate: NoAction, map: "questionnaires_questions_ibfk_1")
  questionnaires_questions_action  questionnaires_questions_action[]
  questionnaires_questions_answers questionnaires_questions_answers[]

  @@index([questionnaire_id], map: "questionnaire_id")
}

model questionnaires_questions_action {
  option_id                        Int                                @id @default(autoincrement())
  question_id                      Int?
  option_title                     String?                            @db.VarChar(255)
  option_value                     Int?
  order_number                     Int?
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @default(now()) @db.Timestamp(0)
  deleted_at                       DateTime?                          @db.Timestamp(0)
  questionnaires_questions         questionnaires_questions?          @relation(fields: [question_id], references: [question_id], onUpdate: NoAction, map: "questionnaires_questions_action_ibfk_1")
  questionnaires_questions_answers questionnaires_questions_answers[]

  @@index([question_id], map: "question_id")
}

model questionnaires_questions_answers {
  answer_id                       Int                              @id @default(autoincrement())
  qr_id                           Int?
  question_id                     Int?
  option_id                       Int?
  score                           Int?
  text_answer                     String?                          @db.VarChar(500)
  created_at                      DateTime?                        @db.Timestamp(0)
  questionnaires_responds         questionnaires_responds?         @relation(fields: [qr_id], references: [qr_id], onUpdate: NoAction, map: "questionnaires_questions_answers_ibfk_1")
  questionnaires_questions        questionnaires_questions?        @relation(fields: [question_id], references: [question_id], onUpdate: NoAction, map: "questionnaires_questions_answers_ibfk_2")
  questionnaires_questions_action questionnaires_questions_action? @relation(fields: [option_id], references: [option_id], onUpdate: NoAction, map: "questionnaires_questions_answers_ibfk_3")

  @@index([option_id], map: "option_id")
  @@index([qr_id], map: "qr_id")
  @@index([question_id], map: "question_id")
}

model questionnaires_responds {
  qr_id                            Int                                @id @default(autoincrement())
  questionnaire_id                 Int?
  patient_id                       Int?
  total_score                      Int?
  score_s2                         Int?
  created_at                       DateTime?                          @default(now()) @db.Timestamp(0)
  questionnaires_questions_answers questionnaires_questions_answers[]
  questionnaires                   questionnaires?                    @relation(fields: [questionnaire_id], references: [questionnaire_id], onUpdate: NoAction, map: "questionnaires_responds_ibfk_1")
  user_patients                    user_patients?                     @relation(fields: [patient_id], references: [patient_id], onUpdate: NoAction, map: "questionnaires_responds_ibfk_2")

  @@index([patient_id], map: "patient_id")
  @@index([questionnaire_id], map: "questionnaire_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service {
  service_id       Int            @id @default(autoincrement())
  therapy_centerID Int?
  name             String         @db.VarChar(255)
  description      String         @db.VarChar(255)
  created_at       DateTime       @db.Timestamp(0)
  updated_at       DateTime       @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?      @db.Timestamp(0)
  appointments     appointments[]
}

model survey_list {
  data_id         Int     @id @default(autoincrement())
  survey_id       String? @db.VarChar(255)
  vehicle_number  String? @db.VarChar(255)
  project_name    String? @db.VarChar(255)
  surveyor_name   String? @db.VarChar(255)
  status          String? @db.VarChar(255)
  vehicle_timein  String? @db.VarChar(255)
  vehicle_timeout String? @db.VarChar(255)
  created_by      String? @db.VarChar(255)
  created_at      String? @db.VarChar(255)
  updated_by      String? @db.VarChar(255)
  updated_at      String? @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_parent_patient {
  parent_child_id Int           @id @default(autoincrement())
  parent_id       Int
  patient_id      Int
  user_parents    user_parents  @relation(fields: [parent_id], references: [parent_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parentID")
  user_patients   user_patients @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_patientID")

  @@index([parent_id], map: "fk_parentID")
  @@index([patient_id], map: "fk_patientID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_parents {
  parent_id                                       Int                   @id @default(autoincrement())
  user_id                                         Int
  parent_relationship                             Int?
  parent_gender                                   String?               @db.VarChar(50)
  parent_dob                                      DateTime?             @db.Date
  parent_nationality                              Int?
  parent_phone                                    String                @db.VarChar(15)
  parent_add1                                     String                @db.VarChar(100)
  parent_add2                                     String?               @db.VarChar(100)
  parent_add3                                     String?               @db.VarChar(100)
  parent_city                                     String                @db.VarChar(255)
  parent_postcode                                 String                @db.VarChar(5)
  parent_state                                    Int?
  parent_status                                   String                @db.VarChar(100)
  created_at                                      DateTime              @db.Timestamp(0)
  updated_at                                      DateTime              @default(now()) @db.Timestamp(0)
  deleted_at                                      DateTime?             @db.Timestamp(0)
  user_parent_patient                             user_parent_patient[]
  lookup_user_parents_parent_relationshipTolookup lookup?               @relation("user_parents_parent_relationshipTolookup", fields: [parent_relationship], references: [lookupID], onUpdate: NoAction, map: "user_parents_ibfk_1")
  lookup_user_parents_parent_nationalityTolookup  lookup?               @relation("user_parents_parent_nationalityTolookup", fields: [parent_nationality], references: [lookupID], onDelete: Restrict, onUpdate: NoAction, map: "user_parents_ibfk_2")
  lookup_user_parents_parent_stateTolookup        lookup?               @relation("user_parents_parent_stateTolookup", fields: [parent_state], references: [lookupID], onDelete: Restrict, onUpdate: NoAction, map: "user_parents_ibfk_3")
  user                                            user                  @relation(fields: [user_id], references: [userID], onUpdate: NoAction, map: "user_parents_ibfk_4")

  @@index([parent_nationality], map: "fk_nationality")
  @@index([parent_relationship], map: "fk_relationship")
  @@index([parent_state], map: "fk_state")
  @@index([user_id], map: "fk_user")
}

model user_patients {
  patient_id              Int                       @id @default(autoincrement())
  user_id                 Int?
  patient_ic              String?                   @db.VarChar(50)
  fullname                String?                   @db.VarChar(250)
  nickname                String?                   @db.VarChar(50)
  gender                  String?                   @db.VarChar(50)
  dob                     DateTime?                 @db.Date
  autism_diagnose         String?                   @db.VarChar(50)
  diagnosed_on            DateTime?                 @db.Date
  status                  String?                   @db.VarChar(50)
  available_session       Int
  created_at              DateTime?                 @db.Timestamp(0)
  update_at               DateTime?                 @default(now()) @db.Timestamp(0)
  deleted_at              DateTime?                 @db.Timestamp(0)
  appointments            appointments[]
  invoice                 invoice[]
  payment                 payment[]
  progress_track          progress_track[]
  questionnaires_responds questionnaires_responds[]
  user_parent_patient     user_parent_patient[]
  user                    user?                     @relation(fields: [user_id], references: [userID], onUpdate: NoAction, map: "user_patients_ibfk_1")

  @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_practitioners {
  practitioner_id  Int              @id @default(autoincrement())
  user_id          Int?
  type             String?          @db.VarChar(50)
  registration_no  String?          @db.VarChar(50)
  specialty        String?          @db.VarChar(255)
  department       String?          @db.VarChar(255)
  qualifications   String?          @db.VarChar(255)
  experience_years Int?
  signature        String?          @db.LongText
  status           String?          @db.VarChar(50)
  created_at       DateTime         @db.Timestamp(0)
  updated_at       DateTime         @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?        @db.Timestamp(0)
  appointments     appointments[]
  progress_track   progress_track[]
  user             user?            @relation(fields: [user_id], references: [userID], onUpdate: NoAction, map: "fk_user_id")

  @@index([user_id], map: "fk_user_id")
}

model therapyst_center {
  center_ID       Int       @id @default(autoincrement())
  center_name     String    @db.VarChar(255)
  center_logo     String    @db.VarChar(255)
  center_phone    String    @db.VarChar(15)
  center_address  String    @db.Text
  center_location String    @db.VarChar(255)
  created_at      DateTime  @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  deleted_at      DateTime? @db.Timestamp(0)
}

model faq {
  faq_ID        Int       @id @default(autoincrement())
  faq_languange Int
  faq_question  String    @db.Text
  faq_answer    String    @db.Text
  faq_status    String    @db.VarChar(50)
  created_at    DateTime  @db.Timestamp(0)
  updated_at    DateTime  @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)
  lookup        lookup    @relation(fields: [faq_languange], references: [lookupID], onDelete: NoAction, onUpdate: NoAction, map: "faq_ibfk_1")

  @@index([faq_languange], map: "faq_languange")
}

model questionnaire_scoring {
  scoring_ID             Int            @id @default(autoincrement())
  scoring_questionnaires Int
  scoring_min            Int
  scoring_max            Int
  scoring_interpretation String         @db.VarChar(255)
  scoring_recommendation String         @db.Text
  created_at             DateTime       @db.Timestamp(0)
  updated_at             DateTime       @db.Timestamp(0)
  deleted_at             DateTime?      @db.Timestamp(0)
  questionnaires         questionnaires @relation(fields: [scoring_questionnaires], references: [questionnaire_id], onDelete: NoAction, onUpdate: NoAction, map: "questionnaire_scoring_ibfk_1")

  @@index([scoring_questionnaires], map: "scoring_questionnaires")
}

model tech_supports {
  techSupport_ID     Int       @id @default(autoincrement())
  techSupport_name   String    @db.VarChar(255)
  techSupport_email  String    @db.VarChar(255)
  techSupport_phone  String    @db.VarChar(50)
  techSupport_status String    @db.VarChar(50)
  created_at         DateTime  @db.Timestamp(0)
  updated_at         DateTime  @db.Timestamp(0)
  deleted_at         DateTime? @db.Timestamp(0)
}

model community {
  community_id      Int       @id @default(autoincrement())
  community_author  String    @db.VarChar(255)
  community_title   String    @db.VarChar(255)
  community_content String    @db.Text
  created_at        DateTime  @db.Timestamp(0)
  updated_at        DateTime  @db.Timestamp(0)
  deleted_at        DateTime? @db.Timestamp(0)
}

model invoice {
  invoice_id    Int            @id @default(autoincrement())
  patient_id    Int?
  invoice_type  String?        @db.VarChar(255)
  description   String?        @db.VarChar(500)
  amount        Decimal?       @db.Decimal(10, 0)
  date          DateTime?      @db.Date
  status        String?        @db.VarChar(255)
  created_at    DateTime       @db.Timestamp(0)
  update_at     DateTime       @db.Timestamp(0)
  deleted_at    DateTime?      @db.Timestamp(0)
  user_patients user_patients? @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_ibfk_1")
  payment       payment[]

  @@index([patient_id], map: "patient_id")
}

/// This model has been renamed to 'Renamedpackage' during introspection, because the original name 'package' is reserved.
model Renamedpackage {
  package_id    Int       @id @default(autoincrement())
  package_name  String?   @db.VarChar(255)
  description   String?   @db.VarChar(500)
  amount        Decimal?  @db.Decimal(10, 0)
  avail_session Int?
  status        String?   @db.VarChar(255)
  created_at    DateTime  @db.Timestamp(0)
  updated_at    DateTime  @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)

  @@map("package")
}

model payment {
  payment_id     Int           @id @default(autoincrement())
  patient_id     Int
  invoice_id     Int?
  amount         Decimal?      @db.Decimal(10, 0)
  method         String?       @db.VarChar(255)
  bank_name      String?       @db.VarChar(255)
  reference_code String?       @db.VarChar(255)
  updated_at     DateTime      @db.Timestamp(0)
  created_at     DateTime      @db.Timestamp(0)
  deleted_at     DateTime?     @db.Timestamp(0)
  user_patients  user_patients @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")
  invoice        invoice?      @relation(fields: [invoice_id], references: [invoice_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_2")

  @@index([invoice_id], map: "invoice_id")
  @@index([patient_id], map: "patient_id")
}
